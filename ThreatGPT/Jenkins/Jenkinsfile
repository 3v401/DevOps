pipeline {
    agent any
    // Use any available Jenkins agent (node) to run the pipeline
    // Order of the process:
    // 1: Checkout project code
    // 2: Run OWASP Dependency-Check
    // 3: Build Docker image
    // 4: Tag and push image to DockerHub
    // 5: Trivy vulnerability scan
    // 6: Deploy image to EKS
    // 7: Archive security reports
    // Note: To load variables stored in Secret Text credentials
    // withCredentials([...]) must be used to inject secret text credentials

    stages {
        // Definition of the stages of the pipeline:
        stage('Checkout') {
            // First stage: Clone tetris source code
            steps {
                git url: 'https://github.com/3v401/DevOps.git', branch: 'master'
                // Clone master branch from repo
            }
        }
        stage('OWASP: Dependency Check') {
            // Second Stage: Run OWASP Dependency-Check
            steps {
                withCredentials([string(credentialsId: 'scanner-private-ip', variable: 'SCANNER_IP')]) {
                    sshagent(credentials: ['scanner-private-key']) {
                        // Load the scanner SSH key and
                        // send the source code (repository) to scanner EC2 for analysis
                        // output as an HTML report
                        sh """
                        # PIPELINE_NAME=threatgpt-pipeline1
                        cd /var/lib/jenkins/workspace/threatgpt-pipeline1
                        scp -o StrictHostKeyChecking=no -r ThreatGPT ubuntu@${SCANNER_IP}:/home/ubuntu/ThreatGPT
                        # Run Dependency Check on the scanner EC2:
                        ssh -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP} '
                            /usr/local/bin/dependency-check.sh --project "ThreatGPT" --scan /home/ubuntu/ThreatGPT --format HTML --out /home/ubuntu/scan-reports
                        '
                        """
                    }
                }
            }
        }
        stage('Build Docker Image') {
            // Third Stage: Build Docker Image
            steps {
                withCredentials([string(credentialsId: 'builder-private-ip', variable: 'BUILDER_IP')]) {
                    sshagent(['builder-private-key']) {
                        sh """
                        scp -o StrictHostKeyChecking=no -r ThreatGPT/Builder ubuntu@${BUILDER_IP}:/home/ubuntu/
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} '
                            cd /home/ubuntu/Builder/API &&
                            docker build -t "$JOB_NAME:v1.$BUILD_ID" .
                        '
                        """
                    }
                }
            }
        }
        stage('Tag Docker Image for ECR') {
            // Fourth Stage: Tag Docker Image
            steps {
                withCredentials([
                string(credentialsId: 'builder-private-ip', variable: 'BUILDER_IP'),
                string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')
                ]) {
                    // Both username and password are required to declare to avoid Groovy CPS execution error
                    sshagent(['builder-private-key']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} '
                            docker tag "$JOB_NAME:v1.$BUILD_ID" "${AWS_ACCOUNT_ID}".dkr.ecr.eu-north-1.amazonaws.com/threatgpt:latest
                        '
                        """
                    }
                }
            }
        }
        stage('Push Docker Image to ECR') {
            // Fifth Stage: Push Docker Image to ECR
            steps {
                withCredentials([
                    string(credentialsId: 'builder-private-ip', variable: 'BUILDER_IP'),
                    string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')
                ]) {
                    sshagent(credentials: ['builder-private-key']){
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} '
                            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com && 
                            docker push "${AWS_ACCOUNT_ID}".dkr.ecr.eu-north-1.amazonaws.com/threatgpt:latest
                        '
                        """
                    }
                }
            }
        }
        stage('Trivy: Image Scan') {
            // Sixth Stage: Pull Docker image from DockerHub
            // Scan Docker Image for vulnerabilities with Trivy
            steps {
                withCredentials([
                    string(credentialsId: 'scanner-private-ip', variable: 'SCANNER_IP'),
                    string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')
                ]) {
                    sshagent(credentials: ['scanner-private-key']) {
                        // Load the scanner SSH key again and
                        // SSH into the EC2 scanner and run the Trivy scan on the Docker Image
                        // Fetch the scan report to Jenkins
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP} '
                            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com && 
                            docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com/threatgpt:latest && 
                            trivy image -f json -o trivy-report.json ${AWS_ACCOUNT_ID}.dkr.ecr.eu-north-1.amazonaws.com/threatgpt:latest
                        '
                        scp -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP}:trivy-report.json .
                        """
                    }
                }
            }
        }
        stage('Render deployment.yaml') {
            steps {
                withCredentials([
                    string(credentialsId: 'builder-private-ip', variable: 'BUILDER_IP'),
                    string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')
                ]) {
                    sshagent(['builder-private-key']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} \\
                            'sed "s|\\\${AWS_USER}|${AWS_ACCOUNT_ID}|g" /home/ubuntu/Builder/EKS/deployment.yaml.tpl > /home/ubuntu/Builder/EKS/deployment.yaml'
                        """
                    }
                }
            }
        }
        stage('Deploy EKS') {
            steps {
                withCredentials([
                    string(credentialsId: 'builder-private-ip', variable: 'BUILDER_IP'),
                    string(credentialsId: 'openai-api-key', variable: 'OPENAI_API_SECRET')
                ]) {
                    sshagent(['builder-private-key']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} '
                            
                            aws eks update-kubeconfig --region eu-north-1 --name staging-eks_demo --profile developer && 
                            
                            kubectl delete secret openai-secret --ignore-not-found && 
                            kubectl create secret generic openai-secret --from-literal=api-key=${OPENAI_API_SECRET} &&

                            cd /home/ubuntu/Builder/EKS && 
                            kubectl apply -f deployment.yaml && 
                            kubectl apply -f service.yaml
                        '
                        """
                    }
                }
            }
        }
        stage('Archive Reports') {
            // Seventh Stage: Archive generated reports
            steps {
                archiveArtifacts artifacts: '**/scan-reports/*.html', allowEmptyArchive: true
                archiveArtifacts artifacts: 'trivy-report.html', allowEmptyArchive: true
            }
        }
    }
}