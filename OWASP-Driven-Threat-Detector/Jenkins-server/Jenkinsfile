pipeline {
    agent any
    // Use any available Jenkins agent (node) to run the pipeline
    // Order of the process:
    // 1: Checkout project code
    // 2: Run OWASP Dependency-Check
    // 3: Build Docker image
    // 4: Tag and push image to DockerHub
    // 5: Trivy vulnerability scan
    // 6: Deploy image to EKS
    // 7: Archive security reports

    environment {
        SCANNER_IP = credentials('scanner-private-ip')
        // The private IP of the EC2 instance used as a security scanner
        BUILDER_IP = credentials('builder-private-ip')
        MONITORING_IP = credentials('monitoring-private-ip')
        // SCANNER_KEY = credentials('scanner-private-key')
        // Inject the Jenkins SSH private key credential
        IMAGE_NAME = 'dockerwhale123whaledocker/${JOB_NAME}'
    }

    stages {
        // Definition of the stages of the pipeline:
        stage('Checkout') {
            // First stage: Clone tetris source code
            steps {
                git url: 'https://github.com/3v401/DevOps.git', branch: 'master'
                // Clone master branch from repo
            }
        }
        stage('OWASP: Dependency Check') {
            // Second Stage: Run OWASP Dependency-Check
            steps {
                sshagent(credentials: ['scanner-private-key']) {
                    // Load the scanner SSH key and
                    // send the source code (repository) to scanner EC2 for analysis
                    // output as an HTML report
                    sh '''
                    scp -o StrictHostKeyChecking=no -r OWASP-Driven-Threat-Detector ubuntu@${SCANNER_IP}:/home/ubuntu/OWASP-Driven-Threat-Detector
                    # Run Dependency Check on the scanner EC2:
                    ssh -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP} '
                        dependency-check.sh --project "ThreatGPT" --scan /home/ubuntu/OWASP-Driven-Threat-Detector --format HTML --out /home/ubuntu/scan-reports
                    '
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            // Third Stage: Build Docker Image
            steps {
                sshagent(['builder-access']) {
                    sh '''
                    echo "Copying source code from Jenkins into Builder-server..."
                    scp -o StrictHostKeyChecking=no -r OWASP-Driven-Threat-Detector/Builder-server ubuntu@${BUILDER_IP}:/home/ubuntu/
                    echo "Building Docker image on Builder-server..."
                    ssh ubuntu@${BUILDER_IP} '
                        cd API &&
                        docker build -t $JOB_NAME:v1.$BUILD_ID .
                    '
                    '''
                }
            }
        }
        stage('Tag Docker Image') {
            // Fourth Stage: Tag Docker Image
            steps {
                sshagent(['builder-access']) {
                    sh '''
                    echo "Tagging Docker Image on Builder-server..."
                    ssh ubuntu@${BUILDER_IP} '
                        docker tag $JOB_NAME:v1.$BUILD_ID dockerwhale123whaledocker/$JOB_NAME:v1.$BUILD_ID &&
                        docker tag $JOB_NAME:v1.$BUILD_ID dockerwhale123whaledocker/$JOB_NAME:latest
                    '
                    '''
                }
            }
        }
        stage('Push Docker Image to DockerHub') {
            // Fifth Stage: Push Docker Image to DockerHub
            steps {
                sshagent(credentials: ['builder-access']){
                    withCredentials([string(credentialsId: 'dockerhub_pass', variable: 'dockerhub_pass')]) {
                        sh '''
                        echo "Logging into DockerHub and pushing image from Builder-server..."
                        ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} "
                            echo $dockerhub_pass | docker login -u dockerwhale123whaledocker --password-stdin &&
                            docker push dockerwhale123whaledocker/$JOB_NAME:v1.$BUILD_ID &&
                            docker push dockerwhale123whaledocker/$JOB_NAME:latest
                            "
                            '''
                    }
                }
            }
        }
        stage('Trivy: Image Scan') {
            // Sixth Stage: Pull Docker image from DockerHub
            // Scan Docker Image for vulnerabilities with Trivy
            steps {
                sshagent(credentials: ['scanner-private-key']) {
                    // Load the scanner SSH key again and
                    // SSH into the EC2 scanner and run the Trivy scan on the Docker Image
                    // Fetch the scan report to Jenkins
                    sh '''
                    echo "Running Trivy Image Scanning on Scanner-server..."
                    ssh -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP} '
                        docker pull $IMAGE_NAME &&
                        trivy image -f html -o trivy-report.html $IMAGE_NAME
                    '
                    scp -o StrictHostKeyChecking=no ubuntu@${SCANNER_IP}:trivy-report.html .
                    '''
                }
            }
        }
        stage('Deploy EKS') {
            steps {
                sshagent(['builder-access']) {
                    sh '''
                    echo "Deploying API on EKS..."
                    ssh -o StrictHostKeyChecking=no ubuntu@${BUILDER_IP} '
                        cd ~/EKS

                        echo "Configuring kubeconfig..."
                        aws eks update-kubeconfig --region eu-north-1 --name API_EKS_ThreatGPT &&
                        
                        echo "Setting new image in deployment..."
                        kubectl set image deployment/fastapi-app fastapi=dockerwhale123whaledocker/$JOB_NAME:v1.$BUILD_ID --record &&
                        
                        echo "Rollout..."
                        kubectl rollout status deployment/fastapi-app

                        echo "Applying ingress.yaml..."
                        kubectl apply -f ~/EKS/ingress.yaml
                    '
                    '''
                }
            }
        }
        stage('Archive Reports') {
            // Seventh Stage: Archive generated reports
            steps {
                archiveArtifacts artifacts: '**/scan-reports/*.html', allowEmptyArchive: true
                archiveArtifacts artifacts: 'trivy-report.html', allowEmptyArchive: true
            }
        }
    }
}